rule "Roku Execution Handler"
when
	Item Roku received update
then
/*
 * 					ROKU HTTP BINDING
 * 
 * 		This binding provides basic keypresses and simple automation for the Roku API.
 * 
 * 		Functionality
 * 			Autosearch
 * 				Custom implementation of automated search for given terms
 * 			Keypresses
 * 				Accepts all key names defined in the Roku API
 * 				Accepts ASCII characters (not space yet)
 *			Channel Install and Launch
 *				Accepts "launch [channel id]" and "install [channel id]"
 * 			Sitemap	
 * 				Entry for Roku with current Channel indication
 * 				Webview of command box for directly passing commands
 * 			
 * 		The binding is composed of
 * 			2 Item registers
 * 			2 Sitemap entries
 * 			1 XSLT transformation
 * 			1 static HTML page 
 * 
 * 		Use
 * 			sendCommand (or similar) to Roku Item
 *				autosearch gene wilder 		 			navigate to search and search "gene wilder"
 *				home	 								presses Home key
 *				launch [channel id]	 					launches channel by id
 *			in Sitemap
 *				Text item=Roku_active_app label="Roku - [%s]"
 *														shows active channel
 * 				Webview	url="http://openhab:8080/static/input.html?item=Roku" height=3
 * 														creates command box
 * 
 * 		Notes: 
 * 			Handles spaces but no special characters
 * 			Thread::sleep is used to wait for the Roku interface to catch up - if you have a
 * 				faster or slower model than Roku 2 (original), you should test changing these
 *
 */


	val rokuIP = "192.168.1.99"
	var List<String> url = new ArrayList
	var List<String> command = Roku.state.toString.toLowerCase.split(" ")
	print(command.toString)
	
/*
 * 					SEARCH AUTOMATION
 * 
 * 		Automatically searches for a given term, passed in the format "autosearch [term]".
 */

	if (command.get(0) == "autosearch") {
		var List<String> presses = Arrays.asList("down", "down", "down", "right")
		var List<String> search = command
		search.set(0, "type")
		var List<String> postcommands = Arrays.asList("right", "right", "right", "right", "right")
		print("1")
		sendCommand(Roku, "home")
		Thread::sleep(5000)
		for ( var i = 0 ; i < presses.size ; i++ ) {
			Thread::sleep(200)
			sendCommand(Roku, presses.get(i))
		}
		Thread::sleep(1000)
		sendCommand(Roku, String.join(" ", search))
		Thread::sleep(1000)
		for ( var i = 0 ; i < postcommands.size ; i++ ) {
			Thread::sleep(200)
			sendCommand(Roku, postcommands.get(i))
		}
		Thread::sleep(5000)
		sendCommand(Roku, "right")
	} else {
		
	if (command.get(0) == "keys") {
		var List
	}

/*
 * 					KEYPRESSES AND TYPING
 * 
 * 		Main interface with the API. This is called repeatedly from all other parts of the rule.
 * 		Accepts 
 * 			keypress values from https://sdkdocs.roku.com/display/sdkdoc/External+Control+Guide#ExternalControlGuide-KeypressKeyValues
 * 			two-parameter implementations of the Roku API POST commands, eg
 * 				"install [app id]" == http://roku:8060/install/[app id]
 * 				"keydown [key]" == http://roku:8060/keydown/[key]
 * 		Does not accept
 * 			input commands
 * 			Roku API GET commands
 * 
 */	

		switch command.length {
			case 1 : { 
				url.add("http://" + rokuIP + ":8060/keypress/" + command.get(0))
			}
			default : {
				if ( command.get(0) == "type") {
					var List<String> chars
					chars = String.join(" ", command.subList(1, command.size)).split("")
					for (var i = 0; i < chars.length ; i++) {
						if (chars.get(i) != " ") { url.add("http://" + rokuIP + ":8060/keypress/lit_" + chars.get(i))
						} else { url.add("http://" + rokuIP + ":8060/keypress/lit_%20")
							
					}
					}
				} else { url.add("http://" + rokuIP + ":8060/" + command.get(0).toLowerCase + "/" + command.get(1)) }
			}
		}
		try {
			for (var i = 0; i < url.length ; i++) {
				sendHttpPostRequest(url.get(i), "text/plain", "")
				Thread::sleep(100)
			}
		} finally {}

	}

end